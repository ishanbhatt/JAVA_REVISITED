Examples Are in ToListCollector.java with the same comments.

public interface Collector<T, A, R> {
    Supplier<A> supplier();
        ->The supplier method has to return a Supplier of an empty result— a parameter-less function that
          when invoked creates an instance of an empty accumulator used during the collection process.

    BiConsumer<A, T> accumulator();
        ->The accumulator method returns the function that performs the reduction operation. When
          traversing the nth element in the stream, this function is applied with two arguments, the
          accumulator being the result of the reduction (after having collected the first n–1 items of the
          stream) and the nth element itself. The function returns void because the accumulator is
          modified in place, meaning that its internal state is changed by the function application to
          reflect the effect of the traversed element.

    Function<A, R> finisher();
        ->The finisher method has to return a function that’s invoked at the end of the accumulation
          process, after having completely traversed the stream, in order to transform the accumulator
          object into the final result of the whole collection operation. Often, as in the case of the
          ToListCollector, the accumulator object already coincides with the final expected result. As a
          consequence, there’s no need to perform a transformation, so the finisher method just has to
          return the identity function.

    BinaryOperator<A> combiner();
        ->The combiner method, the last of the four methods that return a function used by the reduction
          operation, defines how the accumulators resulting from the reduction of different subparts of
          the stream are combined when the subparts are processed in parallel.
          The addition of this method allows a parallel reduction of the stream.

    Set<Characteristics> characteristics();
        ->The last method, characteristics, returns an immutable set of Characteristics, defining the
          behavior of the collector—in particular providing hints about whether the stream can be reduced
          in parallel and which optimizations are valid when doing so.
}